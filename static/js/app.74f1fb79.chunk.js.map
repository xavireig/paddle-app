{"version":3,"sources":["App.tsx","src/index.tsx","src/common/config/apollo-client.ts","src/common/config/apollo/error-link.ts","src/common/config/apollo/http-link.ts","src/common/config/apollo/local-cache.ts","src/screens/Login.tsx","src/assets/logo.png","src/navigation/MainContainer.tsx","src/screens/Players.tsx","src/common/generated/graphql.tsx","src/common/components/UserCard.tsx","src/screens/Courts.tsx","src/screens/Bookings.tsx","src/assets/bookings.png","src/screens/Settings.tsx"],"names":["App","apolloClient","createApolloClient","createDrawerNavigator","LoginScreen","navigation","HomeScreen","Drawer","ApolloProvider","client","NavigationContainer","theme","colors","primary","Navigator","useLegacyImplementation","initialRouteName","screenOptions","headerTintColor","headerShown","Screen","name","component","httpLink","createHttpLink","ApolloClient","link","ApolloLink","from","errorLink","connectToDevTools","process","cache","localCache","assumeImmutableResults","onError","graphQLErrors","networkError","response","operation","error","console","message","locations","path","HttpLink","uri","InMemoryCache","useNavigation","logoImageSource","require","onLoginPress","navigate","onSignupPress","onEmailChange","email","onPasswordChange","password","module","exports","Tab","createBottomTabNavigator","route","tabBarIcon","iconName","focused","color","size","rn","PlayersScreen","BookingsScreen","CourtsScreen","SettingsScreen","useGetUsersQuery","data","loading","style","styles","container","users","renderItem","item","contentContainerStyle","characterList","StyleSheet","create","flex","backgroundColor","padding","baseOptions","options","defaultOptions","Apollo","useLazyQuery","GetUsersDocument","useQuery","gql","details","player","firstName","lastName","text","ranking","width","borderRadius","marginVertical","paddingHorizontal","paddingVertical","flexDirection","marginLeft","justifyContent","fontSize","lineHeight","fontWeight","mapStyle","map","loadingEnabled","region","latitude","longitude","latitudeDelta","longitudeDelta","Dimensions","get","height","alignItems","source","onPress","alert"],"mappings":"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","file":"static/js/app.74f1fb79.chunk.js","sourcesContent":["import App from './src/index';\n\nexport default App;","import React from 'react';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport { createApolloClient } from './common/config/apollo-client';\r\nimport LoginForm from './screens/Login';\r\nimport MainContainer from './navigation/MainContainer';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport 'react-native-gesture-handler'\r\n\r\nconst apolloClient = createApolloClient();\r\nconst Drawer = createDrawerNavigator();\r\n\r\nfunction LoginScreen({ navigation }) {\r\n  return (\r\n    <LoginForm />\r\n  );\r\n}\r\n\r\nfunction HomeScreen({ navigation }) {\r\n  return (\r\n    <MainContainer />\r\n  );\r\n}\r\n\r\nconst App = () => {\r\n  const Drawer = createDrawerNavigator();\r\n  const MyTheme = {\r\n    colors: {\r\n      primary: '#66cc00',\r\n    },\r\n  };\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <NavigationContainer theme={MyTheme}>\r\n        <Drawer.Navigator useLegacyImplementation={true} initialRouteName=\"Login\" screenOptions={{headerTintColor: '#66cc00', headerShown: false}}>\r\n          <Drawer.Screen name=\"Login\" component={LoginScreen} />\r\n          <Drawer.Screen name=\"Home\" component={HomeScreen} />\r\n        </Drawer.Navigator>\r\n      </NavigationContainer>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default App;","import { ApolloClient, ApolloLink } from '@apollo/client';\r\nimport { errorLink } from './apollo/error-link';\r\nimport { createHttpLink } from './apollo/http-link';\r\nimport { localCache } from './apollo/local-cache';\r\n\r\nexport function createApolloClient() {\r\n  const httpLink = createHttpLink();\r\n\r\n  const apolloClient = new ApolloClient({\r\n    link: ApolloLink.from([errorLink, httpLink]),\r\n    connectToDevTools: process.env.NODE_ENV !== 'production',\r\n    cache: localCache,\r\n    assumeImmutableResults: true,\r\n  });\r\n\r\n  return apolloClient;\r\n}","import { onError } from '@apollo/client/link/error';\r\n\r\nexport const errorLink = onError(({ graphQLErrors, networkError, response, operation }) => {\r\n  if (graphQLErrors) {\r\n    for (const error of graphQLErrors) {\r\n      console.error(\r\n        `[GraphQL error]: Message: ${error.message}, Location: ${error.locations}, Path: ${error.path}`,\r\n        operation,\r\n        response\r\n      );\r\n    }\r\n  }\r\n  if (networkError) {\r\n    console.error(`[Network error]: ${networkError}`, operation, response);\r\n  }\r\n});","import { HttpLink } from '@apollo/client/link/http';\r\n\r\nexport function createHttpLink() {\r\n  return new HttpLink({\r\n    uri: 'https://us-central1-paddle-dcde1.cloudfunctions.net/graphql',\r\n  });\r\n}","import {InMemoryCache} from '@apollo/client';\r\n\r\nexport const localCache = new InMemoryCache();","import * as React from 'react';\r\nimport LoginScreen from \"react-native-login-screen\";\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst LoginForm = () => {\r\n    const navigation = useNavigation();\r\n    return (\r\n        <LoginScreen\r\n            logoImageSource={require(\"../assets/logo.png\")}\r\n            onLoginPress={() => {  navigation.navigate('Home')}}\r\n            onSignupPress={() => {}}\r\n            onEmailChange={(email: string) => {}}\r\n            onPasswordChange={(password: string) => {}}\r\n            \r\n            >\r\n        </LoginScreen>\r\n    );\r\n  };\r\n  \r\n  export default LoginForm;","module.exports = __webpack_public_path__ + \"static/media/logo.4f667ef0.png\";","import * as React from 'react';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\n// Screens\r\nimport PlayersScreen from '../screens/Players';\r\nimport CourtsScreen from '../screens/Courts';\r\nimport BookingsScreen from '../screens/Bookings';\r\nimport SettingsScreen from '../screens/Settings';\r\n\r\n//Screen names\r\nconst homeName = \"Players\";\r\nconst bookName = \"Book a court\";\r\nconst mapName = \"Map\";\r\nconst settingsName = \"Settings\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nfunction MainContainer() {\r\n  return (\r\n    // <NavigationContainer>\r\n      <Tab.Navigator\r\n        initialRouteName={homeName}\r\n        screenOptions={({ route }) => ({\r\n          tabBarIcon: ({ focused, color, size }) => {\r\n            let iconName;\r\n            let rn = route.name;\r\n\r\n            if (rn === homeName) {\r\n              iconName = focused ? 'home' : 'home-outline';\r\n\r\n            } else if (rn === bookName) {\r\n              iconName = focused ? 'calendar' : 'calendar-outline';\r\n\r\n            } else if (rn === mapName) {\r\n              iconName = focused ? 'map' : 'map-outline';\r\n\r\n            } else if (rn === settingsName) {\r\n              iconName = focused ? 'settings' : 'settings-outline';\r\n            }\r\n            \r\n            // You can return any component that you like here!\r\n            return <Ionicons name={iconName} size={size} color={color} />;\r\n          },\r\n          \"tabBarActiveTintColor\": \"green\",\r\n          \"tabBarInactiveTintColor\": \"grey\",\r\n            \"tabBarLabelStyle\": {\r\n              \"paddingBottom\": 10,\r\n              \"fontSize\": 10\r\n            },\r\n            \"tabBarStyle\": [\r\n              {\r\n                \"display\": \"flex\",\r\n                \"padding\": 10,\r\n                \"height\": 100\r\n              },\r\n              null\r\n            ]\r\n        })}>\r\n\r\n        <Tab.Screen name={homeName} component={PlayersScreen} />\r\n        <Tab.Screen name={bookName} component={BookingsScreen} />\r\n        <Tab.Screen name={mapName} component={CourtsScreen} />\r\n        <Tab.Screen name={settingsName} component={SettingsScreen} />\r\n\r\n      </Tab.Navigator>\r\n    // </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default MainContainer;","import * as React from 'react';\r\nimport { ActivityIndicator, FlatList, StyleSheet, View } from 'react-native';\r\nimport { User, useGetUsersQuery } from '../common/generated/graphql';\r\n\r\nimport UserCard from '../common/components/UserCard';\r\n\r\nconst Players = () => {\r\n  const { data, loading } = useGetUsersQuery();\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <ActivityIndicator color=\"#FFFFFF\" size=\"large\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <FlatList\r\n        data={data?.users}\r\n        renderItem={({ item }) => <UserCard data={item as User} />}\r\n        contentContainerStyle={styles.characterList}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Players;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#66cc00',\r\n  },\r\n  characterList: {\r\n    padding: 16,\r\n  },\r\n});","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  email?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  ranking?: Maybe<Scalars['Int']>;\n};\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', firstName?: string | null, lastName?: string | null, email?: string | null, ranking?: number | null } | null> | null };\n\n\nexport const GetUsersDocument = gql`\n    query GetUsers {\n  users {\n    firstName\n    lastName\n    email\n    ranking\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = Apollo.QueryResult<GetUsersQuery, GetUsersQueryVariables>;\n\n      export interface PossibleTypesResultData {\n        possibleTypes: {\n          [key: string]: string[]\n        }\n      }\n      const result: PossibleTypesResultData = {\n  \"possibleTypes\": {}\n};\n      export default result;\n    ","import React from 'react';\r\nimport { Image, StyleSheet, Text, View } from 'react-native';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\ninterface Props {\r\n  data: {\r\n    firstName?: string | null;\r\n    lastName?: string | null;\r\n    email?: string | null;\r\n    ranking?: number | null;\r\n  };\r\n}\r\n\r\nconst UserCard: React.FC<Props> = ({ data }) => {\r\n   return (\r\n    <View style={styles.container}>\r\n      <View style={styles.details}>\r\n        <Text style={styles.player}>{data.firstName + ' ' + data.lastName} </Text>\r\n        <Text style={styles.text}>{data.email}</Text>\r\n        <Text style={styles.ranking}>{data.ranking + '  '}<Ionicons name={'star'} size={15} color={'grey'} /></Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    marginVertical: 8,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 15,\r\n    backgroundColor: '#F0F0F0',\r\n    flexDirection: 'row',\r\n  },\r\n  details: {\r\n    marginLeft: 8,\r\n    justifyContent: 'space-between',\r\n    flex: 1,\r\n  },\r\n  text: {\r\n    fontSize: 16,\r\n    lineHeight: 24,\r\n  },\r\n  player: {\r\n    fontWeight: 'bold'\r\n  },\r\n  ranking: {\r\n    fontSize: 16,\r\n    lineHeight: 26\r\n  }\r\n});","import * as React from 'react';\r\nimport { View, Text, Image, Dimensions, StyleSheet } from 'react-native';\r\nimport MapView from 'react-native-maps';\r\n\r\nexport default function Courts({ navigation }) {\r\n    return (\r\n        <View style={styles}>\r\n            <MapView \r\n                style={mapStyle.map}\r\n                loadingEnabled={true}\r\n                region={{\r\n                    latitude: 41.3828,\r\n                    longitude: 2.13563,\r\n                    latitudeDelta: 0.15,\r\n                    longitudeDelta: 0.121\r\n                }}\r\n            />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst mapStyle = StyleSheet.create({\r\n    map: {\r\n      width: Dimensions.get('window').width,\r\n      height: Dimensions.get('window').height,\r\n    },\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#66cc00',\r\n    },\r\n    characterList: {\r\n        padding: 16,\r\n    },\r\n});","import * as React from 'react';\r\nimport { View, Image, StyleSheet } from 'react-native';\r\n\r\nexport default function BookingsScreen({ navigation }) {\r\n    return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n            <Image source={require('../assets/bookings.png')} />\r\n\r\n        </View>\r\n    );\r\n}","module.exports = __webpack_public_path__ + \"static/media/bookings.4ef8fc99.png\";","import * as React from 'react';\r\nimport { View, Text } from 'react-native';\r\n\r\nexport default function HomeScreen({ navigation }) {\r\n    return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n            <Text\r\n                onPress={() => alert('This is the \"Settings\" page.')}\r\n                style={{ fontSize: 26, fontWeight: 'bold' }}>Settings</Text>\r\n        </View>\r\n    );\r\n}"],"sourceRoot":""}